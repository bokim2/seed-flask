require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@babel/runtime/regenerator", "core-js/modules/es.array.concat.js", "core-js/modules/es.array.join.js", "@babel/runtime/helpers/toConsumableArray", "@babel/runtime/helpers/defineProperty", "@babel/runtime/helpers/asyncToGenerator", "@babel/runtime/helpers/classCallCheck", "@babel/runtime/helpers/createClass", "execa"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@babel/runtime/regenerator"), require("core-js/modules/es.array.concat.js"), require("core-js/modules/es.array.join.js"), require("@babel/runtime/helpers/toConsumableArray"), require("@babel/runtime/helpers/defineProperty"), require("@babel/runtime/helpers/asyncToGenerator"), require("@babel/runtime/helpers/classCallCheck"), require("@babel/runtime/helpers/createClass"), require("execa"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.regenerator, global.esArrayConcat, global.esArrayJoin, global.toConsumableArray, global.defineProperty, global.asyncToGenerator, global.classCallCheck, global.createClass, global.execa);
    global.pip = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _regenerator, _esArrayConcat, _esArrayJoin, _toConsumableArray2, _defineProperty2, _asyncToGenerator2, _classCallCheck2, _createClass2, _execa) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _regenerator = _interopRequireDefault(_regenerator);
  _toConsumableArray2 = _interopRequireDefault(_toConsumableArray2);
  _defineProperty2 = _interopRequireDefault(_defineProperty2);
  _asyncToGenerator2 = _interopRequireDefault(_asyncToGenerator2);
  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);
  _execa = _interopRequireDefault(_execa);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var Pip = /*#__PURE__*/function () {
    function Pip() {
      var gitPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
      var logger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : console;
      (0, _classCallCheck2.default)(this, Pip);
      this.gitPath = gitPath;
      this.logger = logger;
    }

    (0, _createClass2.default)(Pip, [{
      key: "install",
      value: function () {
        var _install = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(packageName) {
          var options,
              _user$options,
              user,
              _args = arguments;

          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  _user$options = _objectSpread({
                    user: true
                  }, options), user = _user$options.user;
                  delete options.user;
                  return _context.abrupt("return", this.run(['install'].concat((0, _toConsumableArray2.default)(user ? ['--user'] : []), [packageName]), options));

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function install(_x) {
          return _install.apply(this, arguments);
        }

        return install;
      }()
    }, {
      key: "run",
      value: function () {
        var _run = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(args) {
          var _p$stdout;

          var options,
              _dryrun$pipe$cwd$opti,
              cwd,
              pipe,
              dryrun,
              argsArr,
              command,
              p,
              _yield$p,
              stdout,
              _args2 = arguments;

          return _regenerator.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                  _dryrun$pipe$cwd$opti = _objectSpread({
                    dryrun: false,
                    pipe: false,
                    cwd: process.cwd()
                  }, options), cwd = _dryrun$pipe$cwd$opti.cwd, pipe = _dryrun$pipe$cwd$opti.pipe, dryrun = _dryrun$pipe$cwd$opti.dryrun;
                  argsArr = (0, _toConsumableArray2.default)(Array.isArray(args) ? args : [args]);
                  command = "pip ".concat(argsArr.join(' '));

                  if (!dryrun) {
                    _context2.next = 7;
                    break;
                  }

                  this.logger.info(command);
                  return _context2.abrupt("return", command);

                case 7:
                  p = (0, _execa.default)('sh', ['-c', command], {
                    stdio: 'pipe',
                    cwd: cwd
                  });
                  if (pipe) (_p$stdout = p.stdout) === null || _p$stdout === void 0 ? void 0 : _p$stdout.pipe(process.stdout);
                  _context2.next = 11;
                  return p;

                case 11:
                  _yield$p = _context2.sent;
                  stdout = _yield$p.stdout;
                  _context2.prev = 13;
                  return _context2.abrupt("return", JSON.parse(stdout));

                case 17:
                  _context2.prev = 17;
                  _context2.t0 = _context2["catch"](13);
                  return _context2.abrupt("return", stdout);

                case 20:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[13, 17]]);
        }));

        function run(_x2) {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    }]);
    return Pip;
  }();

  _exports.default = Pip;
});
//# sourceMappingURL=pip.js.map