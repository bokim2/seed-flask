{"version":3,"sources":["../src/git.ts"],"names":["Git","gitPath","process","cwd","logger","console","options","args","help","force","blobCallback","commitCallback","debug","dryRun","emailCallback","filenameCallback","importScripts","invertPaths","messageCallback","nameCallback","partial","paths","pathsGlob","pathsRegex","refnameCallback","refs","resetCallback","tagCallback","argsArr","Array","isArray","map","path","flat","renderCallback","run","dryrun","pipe","command","join","info","p","stdio","stdout","JSON","parse","python","importScript","pythonImportScript","scriptName","scriptsPath","resolve","__dirname","scriptPath"],"mappings":"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","sourcesContent":["/**\n * Copyright 2021 Silicon Hills LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport execa from 'execa';\nimport path from 'path';\n\nexport default class Git {\n  constructor(public gitPath = process.cwd(), private logger = console) {}\n\n  async filterRepo(\n    options: Partial<GitFilterRepoOptions> = {},\n    args: string | string[] = []\n  ) {\n    const {\n      blobCallback,\n      commitCallback,\n      debug,\n      dryRun,\n      emailCallback,\n      filenameCallback,\n      force,\n      help,\n      importScripts,\n      invertPaths,\n      messageCallback,\n      nameCallback,\n      partial,\n      paths,\n      pathsGlob,\n      pathsRegex,\n      refnameCallback,\n      refs,\n      resetCallback,\n      tagCallback\n    } = {\n      help: false,\n      force: false,\n      ...options\n    };\n    delete options.help;\n    const argsArr = [\n      ...(Array.isArray(args) ? args : [args]),\n      ...(debug ? ['--debug'] : []),\n      ...(dryRun ? ['--dry-run'] : []),\n      ...(invertPaths ? ['--invert-paths'] : []),\n      ...(partial ? ['--partial'] : []),\n      ...(paths || []).map((path: string) => ['--path', path]).flat(),\n      ...(pathsRegex || [])\n        .map((path: string) => ['--path-regex', path])\n        .flat(),\n      ...(pathsGlob || []).map((path: string) => ['--path-glob', path]).flat(),\n      ...(blobCallback\n        ? ['--blob-callback', this.renderCallback(blobCallback, importScripts)]\n        : []),\n      ...(commitCallback\n        ? [\n            '--commit-callback',\n            this.renderCallback(commitCallback, importScripts)\n          ]\n        : []),\n      ...(emailCallback\n        ? [\n            '--email-callback',\n            this.renderCallback(emailCallback, importScripts)\n          ]\n        : []),\n      ...(filenameCallback\n        ? [\n            '--filename-callback',\n            this.renderCallback(filenameCallback, importScripts)\n          ]\n        : []),\n      ...(help ? ['-h'] : []),\n      ...(messageCallback\n        ? [\n            '--message-callback',\n            this.renderCallback(messageCallback, importScripts)\n          ]\n        : []),\n      ...(nameCallback\n        ? ['--name-callback', this.renderCallback(nameCallback, importScripts)]\n        : []),\n      ...(refnameCallback\n        ? [\n            '--refname-callback',\n            this.renderCallback(refnameCallback, importScripts)\n          ]\n        : []),\n      ...(refs ? ['--refs', ...refs] : []),\n      ...(resetCallback\n        ? [\n            '--reset-callback',\n            this.renderCallback(resetCallback, importScripts)\n          ]\n        : []),\n      ...(tagCallback\n        ? ['--tag-callback', this.renderCallback(tagCallback, importScripts)]\n        : []),\n      force ? '--force' : ''\n    ];\n    return this.run(['filter-repo', ...argsArr], options);\n  }\n\n  async remote(\n    options: Partial<GitRemoteOptions> = {},\n    args: string | string[] = []\n  ) {\n    const argsArr = [...(Array.isArray(args) ? args : [args])];\n    return this.run(['remote', ...argsArr], options);\n  }\n\n  async run(\n    args: string | string[],\n    options: Partial<GitRunOptions> = {}\n  ): Promise<any> {\n    const { cwd, pipe, dryrun } = {\n      dryrun: false,\n      pipe: false,\n      cwd: this.gitPath,\n      ...options\n    };\n    const argsArr = [...(Array.isArray(args) ? args : [args])];\n    const command = `git ${argsArr.join(' ')}`;\n    if (dryrun) {\n      this.logger.info(command);\n      return command;\n    }\n    const p = execa('sh', ['-c', command], { stdio: 'pipe', cwd });\n    if (pipe) p.stdout?.pipe(process.stdout);\n    const { stdout } = await p;\n    try {\n      return JSON.parse(stdout);\n    } catch (err) {\n      return stdout;\n    }\n  }\n\n  private renderCallback(python: string, importScripts: string[] = []) {\n    return `\"\n${importScripts\n  .map((importScript: string) => this.pythonImportScript(importScript))\n  .join('\\n')}\n${python}\n\"`;\n  }\n\n  private pythonImportScript(scriptName: string) {\n    const scriptsPath = path.resolve(__dirname, '../scripts');\n    const scriptPath = path.resolve(scriptsPath, `${scriptName}.py`);\n    return `\nfrom datetime import datetime, timezone\nfrom importlib import util\nimport os\nspec = util.spec_from_file_location('${scriptName}', '${scriptPath}')\n${scriptName} = util.module_from_spec(spec)\nspec.loader.exec_module(${scriptName})\n`;\n  }\n}\n\nexport interface GitRunOptions {\n  cwd?: string;\n  dryrun?: boolean;\n  pipe?: boolean;\n}\n\nexport interface GitRemoteOptions extends GitRunOptions {}\n\nexport interface GitFilterRepoOptions extends GitRunOptions {\n  blobCallback?: string;\n  commitCallback?: string;\n  debug?: boolean;\n  dryRun?: boolean;\n  emailCallback?: string;\n  filenameCallback?: string;\n  force?: boolean;\n  help?: boolean;\n  importScripts?: string[];\n  invertPaths?: boolean;\n  messageCallback?: string;\n  nameCallback?: string;\n  partial?: boolean;\n  paths?: string[];\n  pathsGlob?: string[];\n  pathsRegex?: string[];\n  refnameCallback?: string;\n  refs?: string | string[];\n  resetCallback?: string;\n  tagCallback?: string;\n}\n"],"file":"git.js"}