{"version":3,"sources":["../src/gitFilterRepo.ts"],"names":["gitDate","GitDate","GitFilterRepo","gitPath","process","cwd","options","git","pip","pipe","preserveOrigin","Git","Pip","previousPath","chdir","installed","install","user","filterRepo","help","execaErr","stderr","indexOf","paths","filteredPaths","pathsGlob","pathsRegex","forEach","path","type","value","PathType","Glob","push","Regex","force","invertPaths","callback","blob","pythonCommit","commitToPythonCommit","pythonCommitToCommit","tag","reset","filename","message","name","email","refname","ensure","socket","Socket","connect","hasRemote","hasOriginRemote","remote","catch","result","close","Set","split","map","replace","has","Operator","authorDate","dateFromGitDate","author_date","authorEmail","author_email","authorName","author_name","branch","committerDate","committer_date","committerEmail","committer_email","committerName","committer_name","dumped","id","oldId","old_id","originalId","original_id","commit","gitDateFromDate"],"mappings":"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","sourcesContent":["/**\n * Copyright 2021 Silicon Hills LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DateArr } from 'kiss-date';\nimport { ExecaError } from 'execa';\nimport { xxhash3 } from 'hash-wasm';\nimport Git, { GitFilterRepoOptions } from './git';\nimport GitDate from './gitDate';\nimport Pip from './pip';\nimport Socket from './socket';\nimport { Options } from './types';\n\nconst gitDate = new GitDate();\n\nexport default class GitFilterRepo {\n  private git: Git;\n\n  private pip: Pip;\n\n  private options: Options;\n\n  constructor(public gitPath = process.cwd(), options: Partial<Options>) {\n    this.options = {\n      pipe: true,\n      preserveOrigin: false,\n      ...options\n    };\n    this.git = new Git(gitPath);\n    this.pip = new Pip(gitPath);\n  }\n\n  async ensure(): Promise<any> {\n    const previousPath = this.gitPath;\n    process.chdir(this.gitPath);\n    if (!(await this.installed())) {\n      await this.pip.install('git-filter-repo', {\n        user: true,\n        pipe: this.options.pipe\n      });\n    }\n    process.chdir(previousPath);\n  }\n\n  async installed(): Promise<boolean> {\n    try {\n      await this.git.filterRepo({ help: true, pipe: this.options.pipe });\n      return true;\n    } catch (err) {\n      const execaErr = err as ExecaError;\n      if (execaErr.stderr?.indexOf('is not a git command') > -1) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  async invertPaths(\n    paths: (string | Path)[],\n    options: Partial<FilterInvertPathsOptions> = {}\n  ) {\n    const filteredPaths: string[] = [];\n    const pathsGlob: string[] = [];\n    const pathsRegex: string[] = [];\n    paths.forEach((path: string | Path) => {\n      if (!path) return;\n      const { type, value } = path as Path;\n      if (type === PathType.Glob) {\n        pathsGlob.push(value);\n      } else if (type === PathType.Regex) {\n        pathsRegex.push(value);\n      } else if (typeof path === 'string' || value) {\n        paths.push(typeof path === 'string' ? path : value);\n      }\n    });\n    return this.git.filterRepo({\n      force: true,\n      ...options,\n      invertPaths: true,\n      paths: filteredPaths,\n      pathsGlob,\n      pathsRegex,\n      pipe: this.options.pipe\n    });\n  }\n\n  async blobCallback(\n    callback: (blob: Blob) => Blob | Promise<Blob>,\n    options: Partial<FilterBlobCallbackOptions> = {}\n  ) {\n    return this.callback('blob', options, async (blob: Blob) => {\n      return callback(blob);\n    });\n  }\n\n  async commitCallback(\n    callback: (commit: Commit) => Commit | Promise<Commit>,\n    options: Partial<FilterCommitCallbackOptions> = {}\n  ) {\n    return this.callback(\n      'commit',\n      options,\n      async (pythonCommit: PythonCommit) => {\n        return commitToPythonCommit(\n          await callback(pythonCommitToCommit(pythonCommit))\n        );\n      }\n    );\n  }\n\n  async tagCallback(\n    callback: (tag: Tag) => Tag | Promise<Tag>,\n    options: Partial<FilterTagCallbackOptions> = {}\n  ) {\n    return this.callback('tag', options, (tag: Tag) => {\n      return callback(tag);\n    });\n  }\n\n  async resetCallback(\n    callback: (reset: Reset) => Reset | Promise<Reset>,\n    options: Partial<FilterResetCallbackOptions> = {}\n  ) {\n    return this.callback('reset', options, async (reset: Reset) => {\n      return callback(reset);\n    });\n  }\n\n  async filenameCallback(\n    callback: (filename: Filename) => Filename | Promise<Filename>,\n    options: Partial<FilterFilenameCallbackOptions> = {}\n  ) {\n    return this.callback('filename', options, async (filename: Filename) => {\n      return callback(filename);\n    });\n  }\n\n  async messageCallback(\n    callback: (message: Message) => Message | Promise<Message>,\n    options: Partial<FilterMessageCallbackOptions> = {}\n  ) {\n    return this.callback('message', options, async (message: Message) => {\n      return callback(message);\n    });\n  }\n\n  async nameCallback(\n    callback: (name: Name) => Name | Promise<Name>,\n    options: Partial<FilterNameCallbackOptions> = {}\n  ) {\n    return this.callback('name', options, async (name: Name) => {\n      return callback(name);\n    });\n  }\n\n  async emailCallback(\n    callback: (email: Email) => Email | Promise<Email>,\n    options: Partial<FilterEmailCallbackOptions> = {}\n  ) {\n    return this.callback('email', options, async (email: Email) => {\n      return callback(email);\n    });\n  }\n\n  async refnameCallback(\n    callback: (refname: Refname) => Refname | Promise<Refname>,\n    options: Partial<FilterRefnameCallbackOptions> = {}\n  ) {\n    return this.callback('refname', options, async (refname: Refname) => {\n      return callback(refname);\n    });\n  }\n\n  async callback(\n    name: string,\n    options: Partial<GitFilterRepoOptions> = {},\n    callback: (...args: any[]) => any = () => null\n  ) {\n    await this.ensure();\n    const socket = new Socket('captain_hook', {\n      [`${name}Callback`]: callback\n    });\n    await socket.connect();\n    const hasOriginRemote =\n      this.options.preserveOrigin && (await this.hasRemote('origin'));\n    if (hasOriginRemote) {\n      await this.git\n        .remote({ pipe: this.options.pipe }, [\n          'remove',\n          await xxhash3('origin')\n        ])\n        .catch(() => null);\n      await this.git.remote({ pipe: this.options.pipe }, [\n        'rename',\n        'origin',\n        await xxhash3('origin')\n      ]);\n    }\n    const result = await this.git.filterRepo({\n      force: true,\n      ...options,\n      [`${name}Callback`]: `return callbacks.callback('${name}', ${name})`,\n      pipe: this.options.pipe,\n      importScripts: ['callbacks']\n    });\n    if (hasOriginRemote) {\n      await this.git.remote({ pipe: this.options.pipe }, [\n        'rename',\n        await xxhash3('origin'),\n        'origin'\n      ]);\n    }\n    await socket.close();\n    return result;\n  }\n\n  async help(options: Partial<FilterRepoHelpOptions> = {}) {\n    return this.git.filterRepo({\n      ...options,\n      help: true,\n      pipe: this.options.pipe\n    });\n  }\n\n  async hasRemote(remote: string): Promise<boolean> {\n    return new Set(\n      (\n        await this.git.remote(\n          {\n            pipe: this.options.pipe\n          },\n          '-v'\n        )\n      )\n        .split('\\n')\n        .map((remote: string) => remote.replace(/\\s+.*$/g, ''))\n    ).has(remote);\n  }\n}\n\nexport interface FilterRepoHelpOptions\n  extends Omit<GitFilterRepoOptions, 'help'> {}\n\nexport interface FilterBlobCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'blobCallback' | 'pipe'> {}\n\nexport interface FilterCommitCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'commitCallback' | 'pipe'> {}\n\nexport interface FilterTagCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'tagCallback' | 'pipe'> {}\n\nexport interface FilterResetCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'resetCallback' | 'pipe'> {}\n\nexport interface FilterFilenameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'filenameCallback' | 'pipe'> {}\n\nexport interface FilterMessageCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'messageCallback' | 'pipe'> {}\n\nexport interface FilterNameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'nameCallback' | 'pipe'> {}\n\nexport interface FilterEmailCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'emailCallback' | 'pipe'> {}\n\nexport interface FilterRefnameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'refnameCallback' | 'pipe'> {}\n\nexport interface FilterInvertPathsOptions\n  extends Omit<\n    GitFilterRepoOptions,\n    'paths' | 'pathsRegex' | 'pathsGlob' | 'invertPaths' | 'pipe'\n  > {}\n\nexport enum Operator {\n  Equal = '=',\n  GreaterThan = '>',\n  GreaterThanOrEqual = '>=',\n  LessThan = '<',\n  LessThanOrEqual = '<=',\n  NotEqual = '!='\n}\n\nexport interface PythonCommit {\n  author_date: string;\n  author_email: string;\n  author_name: string;\n  branch: string;\n  committer_date: string;\n  committer_email: string;\n  committer_name: string;\n  dumped: number;\n  id: number;\n  message: string;\n  old_id: number;\n  original_id: string;\n  type: string;\n}\n\nexport type Blob = any;\n\nexport type Name = string;\n\nexport type Filename = string;\n\nexport type Tag = string;\n\nexport type Email = string;\n\nexport type Message = string;\n\nexport type Reset = any;\n\nexport type Refname = any;\n\nexport interface Commit {\n  authorDate: DateArr;\n  authorEmail: string;\n  authorName: string;\n  branch: string;\n  committerDate: DateArr;\n  committerEmail: string;\n  committerName: string;\n  dumped: number;\n  id: number;\n  message: string;\n  oldId: number;\n  originalId: string;\n  type: string;\n}\n\nexport function pythonCommitToCommit(pythonCommit: PythonCommit): Commit {\n  return {\n    authorDate: gitDate.dateFromGitDate(pythonCommit.author_date),\n    authorEmail: pythonCommit.author_email,\n    authorName: pythonCommit.author_name,\n    branch: pythonCommit.branch,\n    committerDate: gitDate.dateFromGitDate(pythonCommit.committer_date),\n    committerEmail: pythonCommit.committer_email,\n    committerName: pythonCommit.committer_name,\n    dumped: pythonCommit.dumped,\n    id: pythonCommit.id,\n    message: pythonCommit.message,\n    oldId: pythonCommit.old_id,\n    originalId: pythonCommit.original_id,\n    type: pythonCommit.type\n  };\n}\n\nexport function commitToPythonCommit(commit: Commit): PythonCommit {\n  return {\n    author_date: gitDate.gitDateFromDate(commit.authorDate),\n    author_email: commit.authorEmail,\n    author_name: commit.authorName,\n    branch: commit.branch,\n    committer_date: gitDate.gitDateFromDate(commit.committerDate),\n    committer_email: commit.committerEmail,\n    committer_name: commit.committerName,\n    dumped: commit.dumped,\n    id: commit.id,\n    message: commit.message,\n    old_id: commit.oldId,\n    original_id: commit.originalId,\n    type: commit.type\n  };\n}\n\nexport interface Path {\n  type?: PathType;\n  value: string;\n}\n\nexport enum PathType {\n  Glob = 'glob',\n  Regex = 'regex'\n}\n"],"file":"gitFilterRepo.js"}