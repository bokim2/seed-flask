/**
 * Copyright 2021 Silicon Hills LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
export default class Git {
    gitPath: string;
    private logger;
    constructor(gitPath?: string, logger?: Console);
    filterRepo(options?: Partial<GitFilterRepoOptions>, args?: string | string[]): Promise<any>;
    remote(options?: Partial<GitRemoteOptions>, args?: string | string[]): Promise<any>;
    run(args: string | string[], options?: Partial<GitRunOptions>): Promise<any>;
    private renderCallback;
    private pythonImportScript;
}
export interface GitRunOptions {
    cwd?: string;
    dryrun?: boolean;
    pipe?: boolean;
}
export interface GitRemoteOptions extends GitRunOptions {
}
export interface GitFilterRepoOptions extends GitRunOptions {
    blobCallback?: string;
    commitCallback?: string;
    debug?: boolean;
    dryRun?: boolean;
    emailCallback?: string;
    filenameCallback?: string;
    force?: boolean;
    help?: boolean;
    importScripts?: string[];
    invertPaths?: boolean;
    messageCallback?: string;
    nameCallback?: string;
    partial?: boolean;
    paths?: string[];
    pathsGlob?: string[];
    pathsRegex?: string[];
    refnameCallback?: string;
    refs?: string | string[];
    resetCallback?: string;
    tagCallback?: string;
}
