/**
 * Copyright 2021 Silicon Hills LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DateArr } from 'kiss-date';
import { GitFilterRepoOptions } from './git';
import { Options } from './types';
export default class GitFilterRepo {
    gitPath: string;
    private git;
    private pip;
    private options;
    constructor(gitPath: string, options: Partial<Options>);
    ensure(): Promise<any>;
    installed(): Promise<boolean>;
    invertPaths(paths: (string | Path)[], options?: Partial<FilterInvertPathsOptions>): Promise<any>;
    blobCallback(callback: (blob: Blob) => Blob | Promise<Blob>, options?: Partial<FilterBlobCallbackOptions>): Promise<any>;
    commitCallback(callback: (commit: Commit) => Commit | Promise<Commit>, options?: Partial<FilterCommitCallbackOptions>): Promise<any>;
    tagCallback(callback: (tag: Tag) => Tag | Promise<Tag>, options?: Partial<FilterTagCallbackOptions>): Promise<any>;
    resetCallback(callback: (reset: Reset) => Reset | Promise<Reset>, options?: Partial<FilterResetCallbackOptions>): Promise<any>;
    filenameCallback(callback: (filename: Filename) => Filename | Promise<Filename>, options?: Partial<FilterFilenameCallbackOptions>): Promise<any>;
    messageCallback(callback: (message: Message) => Message | Promise<Message>, options?: Partial<FilterMessageCallbackOptions>): Promise<any>;
    nameCallback(callback: (name: Name) => Name | Promise<Name>, options?: Partial<FilterNameCallbackOptions>): Promise<any>;
    emailCallback(callback: (email: Email) => Email | Promise<Email>, options?: Partial<FilterEmailCallbackOptions>): Promise<any>;
    refnameCallback(callback: (refname: Refname) => Refname | Promise<Refname>, options?: Partial<FilterRefnameCallbackOptions>): Promise<any>;
    callback(name: string, options?: Partial<GitFilterRepoOptions>, callback?: (...args: any[]) => any): Promise<any>;
    help(options?: Partial<FilterRepoHelpOptions>): Promise<any>;
    hasRemote(remote: string): Promise<boolean>;
}
export interface FilterRepoHelpOptions extends Omit<GitFilterRepoOptions, 'help'> {
}
export interface FilterBlobCallbackOptions extends Omit<GitFilterRepoOptions, 'blobCallback' | 'pipe'> {
}
export interface FilterCommitCallbackOptions extends Omit<GitFilterRepoOptions, 'commitCallback' | 'pipe'> {
}
export interface FilterTagCallbackOptions extends Omit<GitFilterRepoOptions, 'tagCallback' | 'pipe'> {
}
export interface FilterResetCallbackOptions extends Omit<GitFilterRepoOptions, 'resetCallback' | 'pipe'> {
}
export interface FilterFilenameCallbackOptions extends Omit<GitFilterRepoOptions, 'filenameCallback' | 'pipe'> {
}
export interface FilterMessageCallbackOptions extends Omit<GitFilterRepoOptions, 'messageCallback' | 'pipe'> {
}
export interface FilterNameCallbackOptions extends Omit<GitFilterRepoOptions, 'nameCallback' | 'pipe'> {
}
export interface FilterEmailCallbackOptions extends Omit<GitFilterRepoOptions, 'emailCallback' | 'pipe'> {
}
export interface FilterRefnameCallbackOptions extends Omit<GitFilterRepoOptions, 'refnameCallback' | 'pipe'> {
}
export interface FilterInvertPathsOptions extends Omit<GitFilterRepoOptions, 'paths' | 'pathsRegex' | 'pathsGlob' | 'invertPaths' | 'pipe'> {
}
export declare enum Operator {
    Equal = "=",
    GreaterThan = ">",
    GreaterThanOrEqual = ">=",
    LessThan = "<",
    LessThanOrEqual = "<=",
    NotEqual = "!="
}
export interface PythonCommit {
    author_date: string;
    author_email: string;
    author_name: string;
    branch: string;
    committer_date: string;
    committer_email: string;
    committer_name: string;
    dumped: number;
    id: number;
    message: string;
    old_id: number;
    original_id: string;
    type: string;
}
export declare type Blob = any;
export declare type Name = string;
export declare type Filename = string;
export declare type Tag = string;
export declare type Email = string;
export declare type Message = string;
export declare type Reset = any;
export declare type Refname = any;
export interface Commit {
    authorDate: DateArr;
    authorEmail: string;
    authorName: string;
    branch: string;
    committerDate: DateArr;
    committerEmail: string;
    committerName: string;
    dumped: number;
    id: number;
    message: string;
    oldId: number;
    originalId: string;
    type: string;
}
export declare function pythonCommitToCommit(pythonCommit: PythonCommit): Commit;
export declare function commitToPythonCommit(commit: Commit): PythonCommit;
export interface Path {
    type?: PathType;
    value: string;
}
export declare enum PathType {
    Glob = "glob",
    Regex = "regex"
}
