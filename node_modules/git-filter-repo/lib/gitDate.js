(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "core-js/modules/es.regexp.exec.js", "core-js/modules/es.string.split.js", "core-js/modules/es.number.constructor.js", "core-js/modules/es.array.concat.js", "core-js/modules/es.string.pad-start.js", "core-js/modules/es.object.to-string.js", "core-js/modules/es.regexp.to-string.js", "@babel/runtime/helpers/classCallCheck", "@babel/runtime/helpers/createClass", "kiss-date"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("core-js/modules/es.regexp.exec.js"), require("core-js/modules/es.string.split.js"), require("core-js/modules/es.number.constructor.js"), require("core-js/modules/es.array.concat.js"), require("core-js/modules/es.string.pad-start.js"), require("core-js/modules/es.object.to-string.js"), require("core-js/modules/es.regexp.to-string.js"), require("@babel/runtime/helpers/classCallCheck"), require("@babel/runtime/helpers/createClass"), require("kiss-date"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.esRegexpExec, global.esStringSplit, global.esNumberConstructor, global.esArrayConcat, global.esStringPadStart, global.esObjectToString, global.esRegexpToString, global.classCallCheck, global.createClass, global.kissDate);
    global.gitDate = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _esRegexpExec, _esStringSplit, _esNumberConstructor, _esArrayConcat, _esStringPadStart, _esObjectToString, _esRegexpToString, _classCallCheck2, _createClass2, _kissDate) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);

  /**
   * Copyright 2021 Silicon Hills LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var GitDate = /*#__PURE__*/function () {
    function GitDate() {
      (0, _classCallCheck2.default)(this, GitDate);
    }

    (0, _createClass2.default)(GitDate, [{
      key: "dateFromGitDate",
      value: function dateFromGitDate(gitDate) {
        var dateArr = gitDate.split(' ');
        var gitTimezone = dateArr.length > 1 ? dateArr[1] : '+0000';
        var timezone = this.timezoneFromGitTimezone(gitTimezone);
        return [Number(dateArr[0]), timezone];
      }
    }, {
      key: "timezoneFromGitTimezone",
      value: function timezoneFromGitTimezone(gitTimezone) {
        var gitTimezoneArr = gitTimezone.split(':');
        var timezoneStr = gitTimezoneArr.length > 1 ? gitTimezoneArr[0] + gitTimezoneArr[1] : gitTimezoneArr[0];
        timezoneStr = timezoneStr.length < 5 ? "+".concat(timezoneStr) : timezoneStr;

        if (timezoneStr[0] !== '+' && timezoneStr[0] !== '-' || timezoneStr.length < 5) {
          throw new Error("".concat(gitTimezone, " is an invalid git timezone"));
        }

        var timezoneArr = [Number("".concat(timezoneStr[0], "1")), Number(timezoneStr.substr(1, 2)), Number(timezoneStr.substr(3, 2))];
        var sign = timezoneArr[0],
            hours = timezoneArr[1],
            minutes = timezoneArr[2];
        return (hours * 60 + minutes) * _kissDate.Time.Minute * sign;
      }
    }, {
      key: "gitTimezoneFromTimezone",
      value: function gitTimezoneFromTimezone(timezone) {
        var hours = Math.abs(Math.floor(timezone / _kissDate.Time.Hour));
        var minutes = Math.abs(Math.floor(timezone / _kissDate.Time.Minute % 60));
        return "".concat(timezone < 0 ? '-' : '+').concat(hours.toString().padStart(2, '0')).concat(minutes.toString().padStart(2, '0'));
      }
    }, {
      key: "gitDateFromDate",
      value: function gitDateFromDate(dateArr) {
        var gitTimezone = this.gitTimezoneFromTimezone(dateArr[1]);
        return "".concat(dateArr[0], " ").concat(gitTimezone);
      }
    }]);
    return GitDate;
  }();

  _exports.default = GitDate;
});
//# sourceMappingURL=gitDate.js.map