{"version":3,"sources":["../src/pip.ts"],"names":["Pip","gitPath","process","cwd","logger","console","packageName","options","user","run","args","dryrun","pipe","argsArr","Array","isArray","command","join","info","p","stdio","stdout","JSON","parse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkBqBA,G;AACnB,mBAAsE;AAAA,UAAnDC,OAAmD,uEAAzCC,OAAO,CAACC,GAAR,EAAyC;AAAA,UAAlBC,MAAkB,uEAATC,OAAS;AAAA;AAAA,WAAnDJ,OAAmD,GAAnDA,OAAmD;AAAA,WAAlBG,MAAkB,GAAlBA,MAAkB;AAAE;;;;;+FAExE,iBAAcE,WAAd;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAmCC,kBAAAA,OAAnC,2DAAyE,EAAzE;AAAA;AAEIC,oBAAAA,IAAI,EAAE;AAFV,qBAGOD,OAHP,GACUC,IADV,iBACUA,IADV;AAKE,yBAAOD,OAAO,CAACC,IAAf;AALF,mDAMS,KAAKC,GAAL,EACJ,SADI,0CACWD,IAAI,GAAG,CAAC,QAAD,CAAH,GAAgB,EAD/B,IACoCF,WADpC,IAELC,OAFK,CANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;2FAYA,kBACEG,IADF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEEH,kBAAAA,OAFF,8DAEoC,EAFpC;AAAA;AAKII,oBAAAA,MAAM,EAAE,KALZ;AAMIC,oBAAAA,IAAI,EAAE,KANV;AAOIT,oBAAAA,GAAG,EAAED,OAAO,CAACC,GAAR;AAPT,qBAQOI,OARP,GAIUJ,GAJV,yBAIUA,GAJV,EAIeS,IAJf,yBAIeA,IAJf,EAIqBD,MAJrB,yBAIqBA,MAJrB;AAUQE,kBAAAA,OAVR,oCAUuBC,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAVpD;AAWQM,kBAAAA,OAXR,iBAWyBH,OAAO,CAACI,IAAR,CAAa,GAAb,CAXzB;;AAAA,uBAYMN,MAZN;AAAA;AAAA;AAAA;;AAaI,uBAAKP,MAAL,CAAYc,IAAZ,CAAiBF,OAAjB;AAbJ,oDAcWA,OAdX;;AAAA;AAgBQG,kBAAAA,CAhBR,GAgBY,oBAAM,IAAN,EAAY,CAAC,IAAD,EAAOH,OAAP,CAAZ,EAA6B;AAAEI,oBAAAA,KAAK,EAAE,MAAT;AAAiBjB,oBAAAA,GAAG,EAAHA;AAAjB,mBAA7B,CAhBZ;AAiBE,sBAAIS,IAAJ,EAAU,aAAAO,CAAC,CAACE,MAAF,wDAAUT,IAAV,CAAeV,OAAO,CAACmB,MAAvB;AAjBZ;AAAA,yBAkB2BF,CAlB3B;;AAAA;AAAA;AAkBUE,kBAAAA,MAlBV,YAkBUA,MAlBV;AAAA;AAAA,oDAoBWC,IAAI,CAACC,KAAL,CAAWF,MAAX,CApBX;;AAAA;AAAA;AAAA;AAAA,oDAsBWA,MAtBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S","sourcesContent":["/**\n * Copyright 2021 Silicon Hills LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport execa from 'execa';\n\nexport default class Pip {\n  constructor(public gitPath = process.cwd(), private logger = console) {}\n\n  async install(packageName: string, options: Partial<PipInstallOptions> = {}) {\n    const { user } = {\n      user: true,\n      ...options\n    };\n    delete options.user;\n    return this.run(\n      ['install', ...(user ? ['--user'] : []), packageName],\n      options\n    );\n  }\n\n  async run(\n    args: string | string[],\n    options: Partial<PipRunOptions> = {}\n  ): Promise<any> {\n    const { cwd, pipe, dryrun } = {\n      dryrun: false,\n      pipe: false,\n      cwd: process.cwd(),\n      ...options\n    };\n    const argsArr = [...(Array.isArray(args) ? args : [args])];\n    const command = `pip ${argsArr.join(' ')}`;\n    if (dryrun) {\n      this.logger.info(command);\n      return command;\n    }\n    const p = execa('sh', ['-c', command], { stdio: 'pipe', cwd });\n    if (pipe) p.stdout?.pipe(process.stdout);\n    const { stdout } = await p;\n    try {\n      return JSON.parse(stdout);\n    } catch (err) {\n      return stdout;\n    }\n  }\n}\n\nexport interface PipRunOptions {\n  cwd?: string;\n  dryrun?: boolean;\n  pipe?: boolean;\n}\n\nexport interface PipInstallOptions extends PipRunOptions {\n  user?: boolean;\n}\n"],"file":"pip.js"}