require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@babel/runtime/regenerator", "core-js/modules/es.array.concat.js", "core-js/modules/es.array.flat.js", "core-js/modules/es.array.map.js", "core-js/modules/es.array.join.js", "@babel/runtime/helpers/newArrowCheck", "@babel/runtime/helpers/toConsumableArray", "@babel/runtime/helpers/defineProperty", "@babel/runtime/helpers/asyncToGenerator", "@babel/runtime/helpers/classCallCheck", "@babel/runtime/helpers/createClass", "execa", "path"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@babel/runtime/regenerator"), require("core-js/modules/es.array.concat.js"), require("core-js/modules/es.array.flat.js"), require("core-js/modules/es.array.map.js"), require("core-js/modules/es.array.join.js"), require("@babel/runtime/helpers/newArrowCheck"), require("@babel/runtime/helpers/toConsumableArray"), require("@babel/runtime/helpers/defineProperty"), require("@babel/runtime/helpers/asyncToGenerator"), require("@babel/runtime/helpers/classCallCheck"), require("@babel/runtime/helpers/createClass"), require("execa"), require("path"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.regenerator, global.esArrayConcat, global.esArrayFlat, global.esArrayMap, global.esArrayJoin, global.newArrowCheck, global.toConsumableArray, global.defineProperty, global.asyncToGenerator, global.classCallCheck, global.createClass, global.execa, global.path);
    global.git = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _regenerator, _esArrayConcat, _esArrayFlat, _esArrayMap, _esArrayJoin, _newArrowCheck2, _toConsumableArray2, _defineProperty2, _asyncToGenerator2, _classCallCheck2, _createClass2, _execa, _path) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _regenerator = _interopRequireDefault(_regenerator);
  _newArrowCheck2 = _interopRequireDefault(_newArrowCheck2);
  _toConsumableArray2 = _interopRequireDefault(_toConsumableArray2);
  _defineProperty2 = _interopRequireDefault(_defineProperty2);
  _asyncToGenerator2 = _interopRequireDefault(_asyncToGenerator2);
  _classCallCheck2 = _interopRequireDefault(_classCallCheck2);
  _createClass2 = _interopRequireDefault(_createClass2);
  _execa = _interopRequireDefault(_execa);
  _path = _interopRequireDefault(_path);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var Git = /*#__PURE__*/function () {
    function Git() {
      var gitPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
      var logger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : console;
      (0, _classCallCheck2.default)(this, Git);
      this.gitPath = gitPath;
      this.logger = logger;
    }

    (0, _createClass2.default)(Git, [{
      key: "filterRepo",
      value: function () {
        var _filterRepo = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
          var _this = this;

          var options,
              args,
              _help$force$options,
              blobCallback,
              commitCallback,
              debug,
              dryRun,
              emailCallback,
              filenameCallback,
              force,
              help,
              importScripts,
              invertPaths,
              messageCallback,
              nameCallback,
              partial,
              paths,
              pathsGlob,
              pathsRegex,
              refnameCallback,
              refs,
              resetCallback,
              tagCallback,
              argsArr,
              _args = arguments;

          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                  args = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];
                  _help$force$options = _objectSpread({
                    help: false,
                    force: false
                  }, options), blobCallback = _help$force$options.blobCallback, commitCallback = _help$force$options.commitCallback, debug = _help$force$options.debug, dryRun = _help$force$options.dryRun, emailCallback = _help$force$options.emailCallback, filenameCallback = _help$force$options.filenameCallback, force = _help$force$options.force, help = _help$force$options.help, importScripts = _help$force$options.importScripts, invertPaths = _help$force$options.invertPaths, messageCallback = _help$force$options.messageCallback, nameCallback = _help$force$options.nameCallback, partial = _help$force$options.partial, paths = _help$force$options.paths, pathsGlob = _help$force$options.pathsGlob, pathsRegex = _help$force$options.pathsRegex, refnameCallback = _help$force$options.refnameCallback, refs = _help$force$options.refs, resetCallback = _help$force$options.resetCallback, tagCallback = _help$force$options.tagCallback;
                  delete options.help;
                  argsArr = [].concat((0, _toConsumableArray2.default)(Array.isArray(args) ? args : [args]), (0, _toConsumableArray2.default)(debug ? ['--debug'] : []), (0, _toConsumableArray2.default)(dryRun ? ['--dry-run'] : []), (0, _toConsumableArray2.default)(invertPaths ? ['--invert-paths'] : []), (0, _toConsumableArray2.default)(partial ? ['--partial'] : []), (0, _toConsumableArray2.default)((paths || []).map(function (path) {
                    (0, _newArrowCheck2.default)(this, _this);
                    return ['--path', path];
                  }.bind(this)).flat()), (0, _toConsumableArray2.default)((pathsRegex || []).map(function (path) {
                    (0, _newArrowCheck2.default)(this, _this);
                    return ['--path-regex', path];
                  }.bind(this)).flat()), (0, _toConsumableArray2.default)((pathsGlob || []).map(function (path) {
                    (0, _newArrowCheck2.default)(this, _this);
                    return ['--path-glob', path];
                  }.bind(this)).flat()), (0, _toConsumableArray2.default)(blobCallback ? ['--blob-callback', this.renderCallback(blobCallback, importScripts)] : []), (0, _toConsumableArray2.default)(commitCallback ? ['--commit-callback', this.renderCallback(commitCallback, importScripts)] : []), (0, _toConsumableArray2.default)(emailCallback ? ['--email-callback', this.renderCallback(emailCallback, importScripts)] : []), (0, _toConsumableArray2.default)(filenameCallback ? ['--filename-callback', this.renderCallback(filenameCallback, importScripts)] : []), (0, _toConsumableArray2.default)(help ? ['-h'] : []), (0, _toConsumableArray2.default)(messageCallback ? ['--message-callback', this.renderCallback(messageCallback, importScripts)] : []), (0, _toConsumableArray2.default)(nameCallback ? ['--name-callback', this.renderCallback(nameCallback, importScripts)] : []), (0, _toConsumableArray2.default)(refnameCallback ? ['--refname-callback', this.renderCallback(refnameCallback, importScripts)] : []), (0, _toConsumableArray2.default)(refs ? ['--refs'].concat((0, _toConsumableArray2.default)(refs)) : []), (0, _toConsumableArray2.default)(resetCallback ? ['--reset-callback', this.renderCallback(resetCallback, importScripts)] : []), (0, _toConsumableArray2.default)(tagCallback ? ['--tag-callback', this.renderCallback(tagCallback, importScripts)] : []), [force ? '--force' : '']);
                  return _context.abrupt("return", this.run(['filter-repo'].concat((0, _toConsumableArray2.default)(argsArr)), options));

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function filterRepo() {
          return _filterRepo.apply(this, arguments);
        }

        return filterRepo;
      }()
    }, {
      key: "remote",
      value: function () {
        var _remote = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
          var options,
              args,
              argsArr,
              _args2 = arguments;
          return _regenerator.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                  args = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];
                  argsArr = (0, _toConsumableArray2.default)(Array.isArray(args) ? args : [args]);
                  return _context2.abrupt("return", this.run(['remote'].concat((0, _toConsumableArray2.default)(argsArr)), options));

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function remote() {
          return _remote.apply(this, arguments);
        }

        return remote;
      }()
    }, {
      key: "run",
      value: function () {
        var _run = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(args) {
          var _p$stdout;

          var options,
              _dryrun$pipe$cwd$opti,
              cwd,
              pipe,
              dryrun,
              argsArr,
              command,
              p,
              _yield$p,
              stdout,
              _args3 = arguments;

          return _regenerator.default.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                  _dryrun$pipe$cwd$opti = _objectSpread({
                    dryrun: false,
                    pipe: false,
                    cwd: this.gitPath
                  }, options), cwd = _dryrun$pipe$cwd$opti.cwd, pipe = _dryrun$pipe$cwd$opti.pipe, dryrun = _dryrun$pipe$cwd$opti.dryrun;
                  argsArr = (0, _toConsumableArray2.default)(Array.isArray(args) ? args : [args]);
                  command = "git ".concat(argsArr.join(' '));

                  if (!dryrun) {
                    _context3.next = 7;
                    break;
                  }

                  this.logger.info(command);
                  return _context3.abrupt("return", command);

                case 7:
                  p = (0, _execa.default)('sh', ['-c', command], {
                    stdio: 'pipe',
                    cwd: cwd
                  });
                  if (pipe) (_p$stdout = p.stdout) === null || _p$stdout === void 0 ? void 0 : _p$stdout.pipe(process.stdout);
                  _context3.next = 11;
                  return p;

                case 11:
                  _yield$p = _context3.sent;
                  stdout = _yield$p.stdout;
                  _context3.prev = 13;
                  return _context3.abrupt("return", JSON.parse(stdout));

                case 17:
                  _context3.prev = 17;
                  _context3.t0 = _context3["catch"](13);
                  return _context3.abrupt("return", stdout);

                case 20:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[13, 17]]);
        }));

        function run(_x) {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    }, {
      key: "renderCallback",
      value: function renderCallback(python) {
        var _this2 = this;

        var importScripts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        return "\"\n".concat(importScripts.map(function (importScript) {
          (0, _newArrowCheck2.default)(this, _this2);
          return this.pythonImportScript(importScript);
        }.bind(this)).join('\n'), "\n").concat(python, "\n\"");
      }
    }, {
      key: "pythonImportScript",
      value: function pythonImportScript(scriptName) {
        var scriptsPath = _path.default.resolve(__dirname, '../scripts');

        var scriptPath = _path.default.resolve(scriptsPath, "".concat(scriptName, ".py"));

        return "\nfrom datetime import datetime, timezone\nfrom importlib import util\nimport os\nspec = util.spec_from_file_location('".concat(scriptName, "', '").concat(scriptPath, "')\n").concat(scriptName, " = util.module_from_spec(spec)\nspec.loader.exec_module(").concat(scriptName, ")\n");
      }
    }]);
    return Git;
  }();

  _exports.default = Git;
});
//# sourceMappingURL=git.js.map