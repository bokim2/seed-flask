import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.string.split.js";
import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.string.pad-start.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";

/**
 * Copyright 2021 Silicon Hills LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Time } from 'kiss-date';

var GitDate = /*#__PURE__*/function () {
  function GitDate() {
    _classCallCheck(this, GitDate);
  }

  _createClass(GitDate, [{
    key: "dateFromGitDate",
    value: function dateFromGitDate(gitDate) {
      var dateArr = gitDate.split(' ');
      var gitTimezone = dateArr.length > 1 ? dateArr[1] : '+0000';
      var timezone = this.timezoneFromGitTimezone(gitTimezone);
      return [Number(dateArr[0]), timezone];
    }
  }, {
    key: "timezoneFromGitTimezone",
    value: function timezoneFromGitTimezone(gitTimezone) {
      var gitTimezoneArr = gitTimezone.split(':');
      var timezoneStr = gitTimezoneArr.length > 1 ? gitTimezoneArr[0] + gitTimezoneArr[1] : gitTimezoneArr[0];
      timezoneStr = timezoneStr.length < 5 ? "+".concat(timezoneStr) : timezoneStr;

      if (timezoneStr[0] !== '+' && timezoneStr[0] !== '-' || timezoneStr.length < 5) {
        throw new Error("".concat(gitTimezone, " is an invalid git timezone"));
      }

      var timezoneArr = [Number("".concat(timezoneStr[0], "1")), Number(timezoneStr.substr(1, 2)), Number(timezoneStr.substr(3, 2))];
      var sign = timezoneArr[0],
          hours = timezoneArr[1],
          minutes = timezoneArr[2];
      return (hours * 60 + minutes) * Time.Minute * sign;
    }
  }, {
    key: "gitTimezoneFromTimezone",
    value: function gitTimezoneFromTimezone(timezone) {
      var hours = Math.abs(Math.floor(timezone / Time.Hour));
      var minutes = Math.abs(Math.floor(timezone / Time.Minute % 60));
      return "".concat(timezone < 0 ? '-' : '+').concat(hours.toString().padStart(2, '0')).concat(minutes.toString().padStart(2, '0'));
    }
  }, {
    key: "gitDateFromDate",
    value: function gitDateFromDate(dateArr) {
      var gitTimezone = this.gitTimezoneFromTimezone(dateArr[1]);
      return "".concat(dateArr[0], " ").concat(gitTimezone);
    }
  }]);

  return GitDate;
}();

export { GitDate as default };
//# sourceMappingURL=gitDate.js.map