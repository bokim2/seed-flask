{"version":3,"sources":["../src/gitFilterRepo.ts"],"names":["xxhash3","Git","GitDate","Pip","Socket","gitDate","GitFilterRepo","gitPath","process","cwd","options","git","pip","pipe","preserveOrigin","previousPath","chdir","installed","install","user","filterRepo","help","execaErr","stderr","indexOf","paths","filteredPaths","pathsGlob","pathsRegex","forEach","path","type","value","PathType","Glob","push","Regex","force","invertPaths","callback","blob","pythonCommit","commitToPythonCommit","pythonCommitToCommit","tag","reset","filename","message","name","email","refname","ensure","socket","connect","hasRemote","hasOriginRemote","remote","catch","result","close","Set","split","map","replace","has","Operator","authorDate","dateFromGitDate","author_date","authorEmail","author_email","authorName","author_name","branch","committerDate","committer_date","committerEmail","committer_email","committerName","committer_name","dumped","id","oldId","old_id","originalId","original_id","commit","gitDateFromDate"],"mappings":"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","sourcesContent":["/**\n * Copyright 2021 Silicon Hills LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DateArr } from 'kiss-date';\nimport { ExecaError } from 'execa';\nimport { xxhash3 } from 'hash-wasm';\nimport Git, { GitFilterRepoOptions } from './git';\nimport GitDate from './gitDate';\nimport Pip from './pip';\nimport Socket from './socket';\nimport { Options } from './types';\n\nconst gitDate = new GitDate();\n\nexport default class GitFilterRepo {\n  private git: Git;\n\n  private pip: Pip;\n\n  private options: Options;\n\n  constructor(public gitPath = process.cwd(), options: Partial<Options>) {\n    this.options = {\n      pipe: true,\n      preserveOrigin: false,\n      ...options\n    };\n    this.git = new Git(gitPath);\n    this.pip = new Pip(gitPath);\n  }\n\n  async ensure(): Promise<any> {\n    const previousPath = this.gitPath;\n    process.chdir(this.gitPath);\n    if (!(await this.installed())) {\n      await this.pip.install('git-filter-repo', {\n        user: true,\n        pipe: this.options.pipe\n      });\n    }\n    process.chdir(previousPath);\n  }\n\n  async installed(): Promise<boolean> {\n    try {\n      await this.git.filterRepo({ help: true, pipe: this.options.pipe });\n      return true;\n    } catch (err) {\n      const execaErr = err as ExecaError;\n      if (execaErr.stderr?.indexOf('is not a git command') > -1) {\n        return false;\n      }\n      throw err;\n    }\n  }\n\n  async invertPaths(\n    paths: (string | Path)[],\n    options: Partial<FilterInvertPathsOptions> = {}\n  ) {\n    const filteredPaths: string[] = [];\n    const pathsGlob: string[] = [];\n    const pathsRegex: string[] = [];\n    paths.forEach((path: string | Path) => {\n      if (!path) return;\n      const { type, value } = path as Path;\n      if (type === PathType.Glob) {\n        pathsGlob.push(value);\n      } else if (type === PathType.Regex) {\n        pathsRegex.push(value);\n      } else if (typeof path === 'string' || value) {\n        paths.push(typeof path === 'string' ? path : value);\n      }\n    });\n    return this.git.filterRepo({\n      force: true,\n      ...options,\n      invertPaths: true,\n      paths: filteredPaths,\n      pathsGlob,\n      pathsRegex,\n      pipe: this.options.pipe\n    });\n  }\n\n  async blobCallback(\n    callback: (blob: Blob) => Blob | Promise<Blob>,\n    options: Partial<FilterBlobCallbackOptions> = {}\n  ) {\n    return this.callback('blob', options, async (blob: Blob) => {\n      return callback(blob);\n    });\n  }\n\n  async commitCallback(\n    callback: (commit: Commit) => Commit | Promise<Commit>,\n    options: Partial<FilterCommitCallbackOptions> = {}\n  ) {\n    return this.callback(\n      'commit',\n      options,\n      async (pythonCommit: PythonCommit) => {\n        return commitToPythonCommit(\n          await callback(pythonCommitToCommit(pythonCommit))\n        );\n      }\n    );\n  }\n\n  async tagCallback(\n    callback: (tag: Tag) => Tag | Promise<Tag>,\n    options: Partial<FilterTagCallbackOptions> = {}\n  ) {\n    return this.callback('tag', options, (tag: Tag) => {\n      return callback(tag);\n    });\n  }\n\n  async resetCallback(\n    callback: (reset: Reset) => Reset | Promise<Reset>,\n    options: Partial<FilterResetCallbackOptions> = {}\n  ) {\n    return this.callback('reset', options, async (reset: Reset) => {\n      return callback(reset);\n    });\n  }\n\n  async filenameCallback(\n    callback: (filename: Filename) => Filename | Promise<Filename>,\n    options: Partial<FilterFilenameCallbackOptions> = {}\n  ) {\n    return this.callback('filename', options, async (filename: Filename) => {\n      return callback(filename);\n    });\n  }\n\n  async messageCallback(\n    callback: (message: Message) => Message | Promise<Message>,\n    options: Partial<FilterMessageCallbackOptions> = {}\n  ) {\n    return this.callback('message', options, async (message: Message) => {\n      return callback(message);\n    });\n  }\n\n  async nameCallback(\n    callback: (name: Name) => Name | Promise<Name>,\n    options: Partial<FilterNameCallbackOptions> = {}\n  ) {\n    return this.callback('name', options, async (name: Name) => {\n      return callback(name);\n    });\n  }\n\n  async emailCallback(\n    callback: (email: Email) => Email | Promise<Email>,\n    options: Partial<FilterEmailCallbackOptions> = {}\n  ) {\n    return this.callback('email', options, async (email: Email) => {\n      return callback(email);\n    });\n  }\n\n  async refnameCallback(\n    callback: (refname: Refname) => Refname | Promise<Refname>,\n    options: Partial<FilterRefnameCallbackOptions> = {}\n  ) {\n    return this.callback('refname', options, async (refname: Refname) => {\n      return callback(refname);\n    });\n  }\n\n  async callback(\n    name: string,\n    options: Partial<GitFilterRepoOptions> = {},\n    callback: (...args: any[]) => any = () => null\n  ) {\n    await this.ensure();\n    const socket = new Socket('captain_hook', {\n      [`${name}Callback`]: callback\n    });\n    await socket.connect();\n    const hasOriginRemote =\n      this.options.preserveOrigin && (await this.hasRemote('origin'));\n    if (hasOriginRemote) {\n      await this.git\n        .remote({ pipe: this.options.pipe }, [\n          'remove',\n          await xxhash3('origin')\n        ])\n        .catch(() => null);\n      await this.git.remote({ pipe: this.options.pipe }, [\n        'rename',\n        'origin',\n        await xxhash3('origin')\n      ]);\n    }\n    const result = await this.git.filterRepo({\n      force: true,\n      ...options,\n      [`${name}Callback`]: `return callbacks.callback('${name}', ${name})`,\n      pipe: this.options.pipe,\n      importScripts: ['callbacks']\n    });\n    if (hasOriginRemote) {\n      await this.git.remote({ pipe: this.options.pipe }, [\n        'rename',\n        await xxhash3('origin'),\n        'origin'\n      ]);\n    }\n    await socket.close();\n    return result;\n  }\n\n  async help(options: Partial<FilterRepoHelpOptions> = {}) {\n    return this.git.filterRepo({\n      ...options,\n      help: true,\n      pipe: this.options.pipe\n    });\n  }\n\n  async hasRemote(remote: string): Promise<boolean> {\n    return new Set(\n      (\n        await this.git.remote(\n          {\n            pipe: this.options.pipe\n          },\n          '-v'\n        )\n      )\n        .split('\\n')\n        .map((remote: string) => remote.replace(/\\s+.*$/g, ''))\n    ).has(remote);\n  }\n}\n\nexport interface FilterRepoHelpOptions\n  extends Omit<GitFilterRepoOptions, 'help'> {}\n\nexport interface FilterBlobCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'blobCallback' | 'pipe'> {}\n\nexport interface FilterCommitCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'commitCallback' | 'pipe'> {}\n\nexport interface FilterTagCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'tagCallback' | 'pipe'> {}\n\nexport interface FilterResetCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'resetCallback' | 'pipe'> {}\n\nexport interface FilterFilenameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'filenameCallback' | 'pipe'> {}\n\nexport interface FilterMessageCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'messageCallback' | 'pipe'> {}\n\nexport interface FilterNameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'nameCallback' | 'pipe'> {}\n\nexport interface FilterEmailCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'emailCallback' | 'pipe'> {}\n\nexport interface FilterRefnameCallbackOptions\n  extends Omit<GitFilterRepoOptions, 'refnameCallback' | 'pipe'> {}\n\nexport interface FilterInvertPathsOptions\n  extends Omit<\n    GitFilterRepoOptions,\n    'paths' | 'pathsRegex' | 'pathsGlob' | 'invertPaths' | 'pipe'\n  > {}\n\nexport enum Operator {\n  Equal = '=',\n  GreaterThan = '>',\n  GreaterThanOrEqual = '>=',\n  LessThan = '<',\n  LessThanOrEqual = '<=',\n  NotEqual = '!='\n}\n\nexport interface PythonCommit {\n  author_date: string;\n  author_email: string;\n  author_name: string;\n  branch: string;\n  committer_date: string;\n  committer_email: string;\n  committer_name: string;\n  dumped: number;\n  id: number;\n  message: string;\n  old_id: number;\n  original_id: string;\n  type: string;\n}\n\nexport type Blob = any;\n\nexport type Name = string;\n\nexport type Filename = string;\n\nexport type Tag = string;\n\nexport type Email = string;\n\nexport type Message = string;\n\nexport type Reset = any;\n\nexport type Refname = any;\n\nexport interface Commit {\n  authorDate: DateArr;\n  authorEmail: string;\n  authorName: string;\n  branch: string;\n  committerDate: DateArr;\n  committerEmail: string;\n  committerName: string;\n  dumped: number;\n  id: number;\n  message: string;\n  oldId: number;\n  originalId: string;\n  type: string;\n}\n\nexport function pythonCommitToCommit(pythonCommit: PythonCommit): Commit {\n  return {\n    authorDate: gitDate.dateFromGitDate(pythonCommit.author_date),\n    authorEmail: pythonCommit.author_email,\n    authorName: pythonCommit.author_name,\n    branch: pythonCommit.branch,\n    committerDate: gitDate.dateFromGitDate(pythonCommit.committer_date),\n    committerEmail: pythonCommit.committer_email,\n    committerName: pythonCommit.committer_name,\n    dumped: pythonCommit.dumped,\n    id: pythonCommit.id,\n    message: pythonCommit.message,\n    oldId: pythonCommit.old_id,\n    originalId: pythonCommit.original_id,\n    type: pythonCommit.type\n  };\n}\n\nexport function commitToPythonCommit(commit: Commit): PythonCommit {\n  return {\n    author_date: gitDate.gitDateFromDate(commit.authorDate),\n    author_email: commit.authorEmail,\n    author_name: commit.authorName,\n    branch: commit.branch,\n    committer_date: gitDate.gitDateFromDate(commit.committerDate),\n    committer_email: commit.committerEmail,\n    committer_name: commit.committerName,\n    dumped: commit.dumped,\n    id: commit.id,\n    message: commit.message,\n    old_id: commit.oldId,\n    original_id: commit.originalId,\n    type: commit.type\n  };\n}\n\nexport interface Path {\n  type?: PathType;\n  value: string;\n}\n\nexport enum PathType {\n  Glob = 'glob',\n  Regex = 'regex'\n}\n"],"file":"gitFilterRepo.js"}