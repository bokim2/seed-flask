{"version":3,"sources":["../src/git.ts"],"names":["execa","path","Git","gitPath","process","cwd","logger","console","options","args","help","force","blobCallback","commitCallback","debug","dryRun","emailCallback","filenameCallback","importScripts","invertPaths","messageCallback","nameCallback","partial","paths","pathsGlob","pathsRegex","refnameCallback","refs","resetCallback","tagCallback","argsArr","Array","isArray","map","flat","renderCallback","run","dryrun","pipe","command","join","info","p","stdio","stdout","JSON","parse","python","importScript","pythonImportScript","scriptName","scriptsPath","resolve","__dirname","scriptPath"],"mappings":"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","sourcesContent":["/**\n * Copyright 2021 Silicon Hills LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport execa from 'execa';\nimport path from 'path';\n\nexport default class Git {\n  constructor(public gitPath = process.cwd(), private logger = console) {}\n\n  async filterRepo(\n    options: Partial<GitFilterRepoOptions> = {},\n    args: string | string[] = []\n  ) {\n    const {\n      blobCallback,\n      commitCallback,\n      debug,\n      dryRun,\n      emailCallback,\n      filenameCallback,\n      force,\n      help,\n      importScripts,\n      invertPaths,\n      messageCallback,\n      nameCallback,\n      partial,\n      paths,\n      pathsGlob,\n      pathsRegex,\n      refnameCallback,\n      refs,\n      resetCallback,\n      tagCallback\n    } = {\n      help: false,\n      force: false,\n      ...options\n    };\n    delete options.help;\n    const argsArr = [\n      ...(Array.isArray(args) ? args : [args]),\n      ...(debug ? ['--debug'] : []),\n      ...(dryRun ? ['--dry-run'] : []),\n      ...(invertPaths ? ['--invert-paths'] : []),\n      ...(partial ? ['--partial'] : []),\n      ...(paths || []).map((path: string) => ['--path', path]).flat(),\n      ...(pathsRegex || [])\n        .map((path: string) => ['--path-regex', path])\n        .flat(),\n      ...(pathsGlob || []).map((path: string) => ['--path-glob', path]).flat(),\n      ...(blobCallback\n        ? ['--blob-callback', this.renderCallback(blobCallback, importScripts)]\n        : []),\n      ...(commitCallback\n        ? [\n            '--commit-callback',\n            this.renderCallback(commitCallback, importScripts)\n          ]\n        : []),\n      ...(emailCallback\n        ? [\n            '--email-callback',\n            this.renderCallback(emailCallback, importScripts)\n          ]\n        : []),\n      ...(filenameCallback\n        ? [\n            '--filename-callback',\n            this.renderCallback(filenameCallback, importScripts)\n          ]\n        : []),\n      ...(help ? ['-h'] : []),\n      ...(messageCallback\n        ? [\n            '--message-callback',\n            this.renderCallback(messageCallback, importScripts)\n          ]\n        : []),\n      ...(nameCallback\n        ? ['--name-callback', this.renderCallback(nameCallback, importScripts)]\n        : []),\n      ...(refnameCallback\n        ? [\n            '--refname-callback',\n            this.renderCallback(refnameCallback, importScripts)\n          ]\n        : []),\n      ...(refs ? ['--refs', ...refs] : []),\n      ...(resetCallback\n        ? [\n            '--reset-callback',\n            this.renderCallback(resetCallback, importScripts)\n          ]\n        : []),\n      ...(tagCallback\n        ? ['--tag-callback', this.renderCallback(tagCallback, importScripts)]\n        : []),\n      force ? '--force' : ''\n    ];\n    return this.run(['filter-repo', ...argsArr], options);\n  }\n\n  async remote(\n    options: Partial<GitRemoteOptions> = {},\n    args: string | string[] = []\n  ) {\n    const argsArr = [...(Array.isArray(args) ? args : [args])];\n    return this.run(['remote', ...argsArr], options);\n  }\n\n  async run(\n    args: string | string[],\n    options: Partial<GitRunOptions> = {}\n  ): Promise<any> {\n    const { cwd, pipe, dryrun } = {\n      dryrun: false,\n      pipe: false,\n      cwd: this.gitPath,\n      ...options\n    };\n    const argsArr = [...(Array.isArray(args) ? args : [args])];\n    const command = `git ${argsArr.join(' ')}`;\n    if (dryrun) {\n      this.logger.info(command);\n      return command;\n    }\n    const p = execa('sh', ['-c', command], { stdio: 'pipe', cwd });\n    if (pipe) p.stdout?.pipe(process.stdout);\n    const { stdout } = await p;\n    try {\n      return JSON.parse(stdout);\n    } catch (err) {\n      return stdout;\n    }\n  }\n\n  private renderCallback(python: string, importScripts: string[] = []) {\n    return `\"\n${importScripts\n  .map((importScript: string) => this.pythonImportScript(importScript))\n  .join('\\n')}\n${python}\n\"`;\n  }\n\n  private pythonImportScript(scriptName: string) {\n    const scriptsPath = path.resolve(__dirname, '../scripts');\n    const scriptPath = path.resolve(scriptsPath, `${scriptName}.py`);\n    return `\nfrom datetime import datetime, timezone\nfrom importlib import util\nimport os\nspec = util.spec_from_file_location('${scriptName}', '${scriptPath}')\n${scriptName} = util.module_from_spec(spec)\nspec.loader.exec_module(${scriptName})\n`;\n  }\n}\n\nexport interface GitRunOptions {\n  cwd?: string;\n  dryrun?: boolean;\n  pipe?: boolean;\n}\n\nexport interface GitRemoteOptions extends GitRunOptions {}\n\nexport interface GitFilterRepoOptions extends GitRunOptions {\n  blobCallback?: string;\n  commitCallback?: string;\n  debug?: boolean;\n  dryRun?: boolean;\n  emailCallback?: string;\n  filenameCallback?: string;\n  force?: boolean;\n  help?: boolean;\n  importScripts?: string[];\n  invertPaths?: boolean;\n  messageCallback?: string;\n  nameCallback?: string;\n  partial?: boolean;\n  paths?: string[];\n  pathsGlob?: string[];\n  pathsRegex?: string[];\n  refnameCallback?: string;\n  refs?: string | string[];\n  resetCallback?: string;\n  tagCallback?: string;\n}\n"],"file":"git.js"}