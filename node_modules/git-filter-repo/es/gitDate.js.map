{"version":3,"sources":["../src/gitDate.ts"],"names":["Time","GitDate","gitDate","dateArr","split","gitTimezone","length","timezone","timezoneFromGitTimezone","Number","gitTimezoneArr","timezoneStr","Error","timezoneArr","substr","sign","hours","minutes","Minute","Math","abs","floor","Hour","toString","padStart","gitTimezoneFromTimezone"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAmBA,IAAnB,QAAwC,WAAxC;;IAEqBC,O;;;;;;;WACnB,yBAAgBC,OAAhB,EAA0C;AACxC,UAAMC,OAAO,GAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAhB;AACA,UAAMC,WAAW,GAAGF,OAAO,CAACG,MAAR,GAAiB,CAAjB,GAAqBH,OAAO,CAAC,CAAD,CAA5B,GAAkC,OAAtD;AACA,UAAMI,QAAQ,GAAG,KAAKC,uBAAL,CAA6BH,WAA7B,CAAjB;AACA,aAAO,CAACI,MAAM,CAACN,OAAO,CAAC,CAAD,CAAR,CAAP,EAAqBI,QAArB,CAAP;AACD;;;WAED,iCAAwBF,WAAxB,EAAuD;AACrD,UAAMK,cAAc,GAAGL,WAAW,CAACD,KAAZ,CAAkB,GAAlB,CAAvB;AACA,UAAIO,WAAW,GACbD,cAAc,CAACJ,MAAf,GAAwB,CAAxB,GACII,cAAc,CAAC,CAAD,CAAd,GAAoBA,cAAc,CAAC,CAAD,CADtC,GAEIA,cAAc,CAAC,CAAD,CAHpB;AAIAC,MAAAA,WAAW,GAAGA,WAAW,CAACL,MAAZ,GAAqB,CAArB,cAA6BK,WAA7B,IAA6CA,WAA3D;;AACA,UACGA,WAAW,CAAC,CAAD,CAAX,KAAmB,GAAnB,IAA0BA,WAAW,CAAC,CAAD,CAAX,KAAmB,GAA9C,IACAA,WAAW,CAACL,MAAZ,GAAqB,CAFvB,EAGE;AACA,cAAM,IAAIM,KAAJ,WAAaP,WAAb,iCAAN;AACD;;AACD,UAAMQ,WAAW,GAAG,CAClBJ,MAAM,WAAIE,WAAW,CAAC,CAAD,CAAf,OADY,EAElBF,MAAM,CAACE,WAAW,CAACG,MAAZ,CAAmB,CAAnB,EAAsB,CAAtB,CAAD,CAFY,EAGlBL,MAAM,CAACE,WAAW,CAACG,MAAZ,CAAmB,CAAnB,EAAsB,CAAtB,CAAD,CAHY,CAApB;AAKA,UAAOC,IAAP,GAA+BF,WAA/B;AAAA,UAAaG,KAAb,GAA+BH,WAA/B;AAAA,UAAoBI,OAApB,GAA+BJ,WAA/B;AACA,aAAO,CAACG,KAAK,GAAG,EAAR,GAAaC,OAAd,IAAyBjB,IAAI,CAACkB,MAA9B,GAAuCH,IAA9C;AACD;;;WAED,iCAAwBR,QAAxB,EAAoD;AAClD,UAAMS,KAAK,GAAGG,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWd,QAAQ,GAAGP,IAAI,CAACsB,IAA3B,CAAT,CAAd;AACA,UAAML,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAYd,QAAQ,GAAGP,IAAI,CAACkB,MAAjB,GAA2B,EAAtC,CAAT,CAAhB;AACA,uBAAUX,QAAQ,GAAG,CAAX,GAAe,GAAf,GAAqB,GAA/B,SAAqCS,KAAK,CACvCO,QADkC,GAElCC,QAFkC,CAEzB,CAFyB,EAEtB,GAFsB,CAArC,SAEsBP,OAAO,CAACM,QAAR,GAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAFtB;AAGD;;;WAED,yBAAgBrB,OAAhB,EAA0C;AACxC,UAAME,WAAW,GAAG,KAAKoB,uBAAL,CAA6BtB,OAAO,CAAC,CAAD,CAApC,CAApB;AACA,uBAAUA,OAAO,CAAC,CAAD,CAAjB,cAAwBE,WAAxB;AACD;;;;;;SAzCkBJ,O","sourcesContent":["/**\n * Copyright 2021 Silicon Hills LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timezone, Time, DateArr } from 'kiss-date';\n\nexport default class GitDate {\n  dateFromGitDate(gitDate: string): DateArr {\n    const dateArr = gitDate.split(' ');\n    const gitTimezone = dateArr.length > 1 ? dateArr[1] : '+0000';\n    const timezone = this.timezoneFromGitTimezone(gitTimezone);\n    return [Number(dateArr[0]), timezone];\n  }\n\n  timezoneFromGitTimezone(gitTimezone: string): Timezone {\n    const gitTimezoneArr = gitTimezone.split(':');\n    let timezoneStr =\n      gitTimezoneArr.length > 1\n        ? gitTimezoneArr[0] + gitTimezoneArr[1]\n        : gitTimezoneArr[0];\n    timezoneStr = timezoneStr.length < 5 ? `+${timezoneStr}` : timezoneStr;\n    if (\n      (timezoneStr[0] !== '+' && timezoneStr[0] !== '-') ||\n      timezoneStr.length < 5\n    ) {\n      throw new Error(`${gitTimezone} is an invalid git timezone`);\n    }\n    const timezoneArr = [\n      Number(`${timezoneStr[0]}1`),\n      Number(timezoneStr.substr(1, 2)),\n      Number(timezoneStr.substr(3, 2))\n    ];\n    const [sign, hours, minutes] = timezoneArr;\n    return (hours * 60 + minutes) * Time.Minute * sign;\n  }\n\n  gitTimezoneFromTimezone(timezone: Timezone): string {\n    const hours = Math.abs(Math.floor(timezone / Time.Hour));\n    const minutes = Math.abs(Math.floor((timezone / Time.Minute) % 60));\n    return `${timezone < 0 ? '-' : '+'}${hours\n      .toString()\n      .padStart(2, '0')}${minutes.toString().padStart(2, '0')}`;\n  }\n\n  gitDateFromDate(dateArr: DateArr): string {\n    const gitTimezone = this.gitTimezoneFromTimezone(dateArr[1]);\n    return `${dateArr[0]} ${gitTimezone}`;\n  }\n}\n"],"file":"gitDate.js"}