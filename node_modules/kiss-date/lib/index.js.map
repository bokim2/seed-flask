{"version":3,"sources":["../src/index.ts"],"names":["KissDate","date","timezone","dateArr","kissDateTimezone","getTimezone","Date","getTimezoneOffset","Time","Minute","Array","isArray","Math","floor","getTime","Millisecond","jsDate","adjustTime","timezoneAbs","abs","hours","Hour","minutes","toString","padStart","timezoneArr","split","timezoneStr","length","Error","sign","parseInt","substr","Second"],"mappings":"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","sourcesContent":["export default class KissDate {\n  public dateArr: DateArr;\n\n  constructor(\n    date?: Date | KissDate | DateArr | UnixTimestamp,\n    timezone?: Timezone | string\n  ) {\n    const kissDateTimezone =\n      typeof timezone === 'string'\n        ? KissDate.getTimezone(timezone)\n        : timezone ?? null;\n    if (typeof date === 'number') {\n      this.dateArr = [\n        date,\n        kissDateTimezone ?? -new Date().getTimezoneOffset() * Time.Minute\n      ];\n    } else if (Array.isArray(date)) {\n      this.dateArr = [date[0], kissDateTimezone ?? date[1]];\n    } else if (date instanceof Date) {\n      this.dateArr = [\n        Math.floor(date.getTime() * Time.Millisecond),\n        kissDateTimezone ?? -date.getTimezoneOffset() * Time.Minute\n      ];\n    } else if (date instanceof KissDate) {\n      this.dateArr = date.dateArr;\n    } else {\n      const jsDate = new Date();\n      this.dateArr = [\n        Math.floor(jsDate.getTime() * Time.Millisecond),\n        kissDateTimezone ?? -jsDate.getTimezoneOffset() * Time.Minute\n      ];\n    }\n  }\n\n  get jsDate(): Date {\n    return new Date(this.dateArr[0] / Time.Millisecond);\n  }\n\n  get localShiftedJsDate(): Date {\n    return new Date((this.dateArr[0] + this.timezone) / Time.Millisecond);\n  }\n\n  changeTimezone(timezone: Timezone | string, adjustTime = true): KissDate {\n    const kissDateTimezone =\n      typeof timezone === 'string'\n        ? KissDate.getTimezone(timezone)\n        : timezone ?? null;\n    if (!adjustTime) {\n      this.dateArr[0] = this.dateArr[0] + this.timezone - kissDateTimezone;\n    }\n    this.dateArr[1] = kissDateTimezone;\n    return this;\n  }\n\n  get timezone(): Timezone {\n    return this.dateArr[1];\n  }\n\n  get timezoneStr(): string {\n    const timezoneAbs = Math.abs(this.timezone);\n    const hours = Math.floor(timezoneAbs / Time.Hour);\n    const minutes = Math.floor((timezoneAbs / Time.Minute) % Time.Minute);\n    return `${this.timezone < 0 ? '-' : '+'}${hours\n      .toString()\n      .padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  }\n\n  static getTimezone(timezone: string | number): number {\n    if (typeof timezone === 'number') return timezone;\n    const timezoneArr = timezone.split(':');\n    let timezoneStr =\n      timezoneArr.length > 1 ? timezoneArr[0] + timezoneArr[1] : timezoneArr[0];\n    if (timezoneStr.length < 5) timezoneStr = `+${timezoneStr}`;\n    if (\n      (timezoneStr[0] !== '+' && timezoneStr[0] !== '-') ||\n      timezoneStr.length < 5\n    ) {\n      throw new Error(`${timezone} is an invalid timezone string`);\n    }\n    const sign = timezoneStr[0] === '-' ? -1 : 1;\n    const hours = parseInt(timezoneStr.substr(1, 2), 10) * Time.Minute;\n    const minutes = parseInt(timezoneStr.substr(3, 2), 10) * Time.Minute;\n    return (hours * Time.Minute + minutes) * sign;\n  }\n}\n\nexport enum Time {\n  Second = 1,\n  Minute = Time.Second * 60,\n  Hour = Time.Minute * 60,\n  Day = Time.Hour * 24,\n  Millisecond = 1 / 1000\n}\n\nexport type DateArr = [UnixTimestamp, Timezone];\n\nexport type UnixTimestamp = number;\n\nexport type Timezone = number;\n"],"file":"index.js"}